<?phpclass DxClient{	public $appkey;	public $secretKey;//私钥	public $gatewayUrl = "https://www.taodaxiang.com/api/router/";//接口url	public $format = "json";//数据响应格式	public $checkRequest = true;	protected $signMethod = "md5";//签名算法	protected $apiVersion = "1.0";//api接口协议		/**	 * 生成签名	 * @Author   zsw	 * @DataTime 2019-03-18T10:28:45+0800	 * @param    [type]                   $params [description]	 * @return   [type]                           [description]	 */	protected function generateSign($params)	{		ksort($params);//签名参数排序			$stringToBeSigned = $this->secretKey;//获取秘钥		foreach ($params as $k => $v)		{			if("@" != substr($v, 0, 1))			{				$stringToBeSigned .= "$k$v";              			}		}		unset($k, $v);		$stringToBeSigned .= $this->secretKey;		return strtoupper(md5($stringToBeSigned));	}	public function curl($url, $postFields = null)	{		$ch = curl_init();		curl_setopt($ch, CURLOPT_URL, $url);		curl_setopt($ch, CURLOPT_FAILONERROR, false);		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);		if(strlen($url) > 5 && strtolower(substr($url,0,5)) == "https" ) {			curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);			curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);		}		if (is_array($postFields) && 0 < count($postFields))		{			$postBodyString = "";			$postMultipart = false;			foreach ($postFields as $k => $v)			{				if("@" != substr($v, 0, 1))				{					$postBodyString .= "$k=" . urlencode($v) . "&";				}				else				{					$postMultipart = true;				}			}			unset($k, $v);			curl_setopt($ch, CURLOPT_POST, true);			if ($postMultipart)			{				curl_setopt($ch, CURLOPT_POSTFIELDS, $postFields);			}			else			{				curl_setopt($ch, CURLOPT_POSTFIELDS, substr($postBodyString,0,-1));			}           		}		$reponse = curl_exec($ch);				if (curl_errno($ch))		{			throw new Exception(curl_error($ch),0);		}		else		{			$httpStatusCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);			if (200 !== $httpStatusCode)			{				throw new Exception($reponse,$httpStatusCode);			}		}		curl_close($ch);		return $reponse;	}	public function execute($request)	{		$result = new stdClass();		if($this->checkRequest) {			try {				$request->check();			} catch (Exception $e) {				$result->code = $e->getCode();				$result->msg = $e->getMessage();				return $result;			}		}				$sysParams["app_key"] = $this->appkey;		$sysParams["v"] = $this->apiVersion;		$sysParams["format"] = $this->format;		$sysParams["sign_method"] = $this->signMethod;		$sysParams["method"] = $request->getApiMethodName();		$sysParams["timestamp"] = date("Y-m-d H:i:s");		$apiParams = $request->getApiParas();				$sysParams["sign"] = $this->generateSign(array_merge($apiParams, $sysParams));		$requestUrl = $this->gatewayUrl . "?";		foreach ($sysParams as $sysParamKey => $sysParamValue)		{			$requestUrl .= "$sysParamKey=" . urlencode($sysParamValue) . "&";		}		$requestUrl = substr($requestUrl, 0, -1);          		try		{			$resp = urldecode($this->curl($requestUrl, $apiParams));						}		catch (Exception $e)		{					$result->code = $e->getCode();			$result->msg = $e->getMessage();			return $result;		}		$respWellFormed = false;		if ("json" == $this->format)		{			$respObject = json_decode($resp);			if (null !== $respObject)			{				$respWellFormed = true;						}		}		else if("xml" == $this->format)		{			$respObject = @simplexml_load_string($resp);			if (false !== $respObject)			{				$respWellFormed = true;			}		}		if (false === $respWellFormed)		{						$result->code = 0;			$result->msg = "HTTP_RESPONSE_NOT_WELL_FORMED";			return $result;		}		return $respObject;	}}///////////////////////////////////////////////////////////////////////////////////////////////////////////class DxRequestCheckUtil{	public static function checkNotNull($value,$fieldName) {		if(self::checkEmpty($value)){			throw new Exception("client-check-error:Missing Required Arguments: " .$fieldName , 40);		}	}	public static function checkMaxLength($value,$maxLength,$fieldName){		if(!self::checkEmpty($value) && strlen($value) > $maxLength){			throw new Exception("client-check-error:Invalid Arguments:the length of " .$fieldName . " can not be larger than " . $maxLength . "." , 41);		}	}	public static function checkMaxListSize($value,$maxSize,$fieldName) {		if(self::checkEmpty($value))			return ;		$list=preg_split("/,/",$value);		if(count($list) > $maxSize){				throw new Exception("client-check-error:Invalid Arguments:the listsize(the string split by \",\") of ". $fieldName . " must be less than " . $maxSize . " ." , 41);		}	}	public static function checkMaxValue($value,$maxValue,$fieldName){		if(self::checkEmpty($value))			return ;		self::checkNumeric($value,$fieldName);		if($value > $maxValue){				throw new Exception("client-check-error:Invalid Arguments:the value of " . $fieldName . " can not be larger than " . $maxValue ." ." , 41);		}	}	public static function checkMinValue($value,$minValue,$fieldName) {		if(self::checkEmpty($value))			return ;		self::checkNumeric($value,$fieldName);		if($value < $minValue){				throw new Exception("client-check-error:Invalid Arguments:the value of " . $fieldName . " can not be less than " . $minValue . " ." , 41);		}	}	public static function checkNumeric($value,$fieldName) {		if(!is_numeric($value))			throw new Exception("client-check-error:Invalid Arguments:the value of " . $fieldName . " is not number : " . $value . " ." , 41);	}	public static function checkEmpty($value) {		if(!isset($value))			return true ;		if($value === null )			return true;		if(trim($value) === "")			return true;		return false;	}		public static function checkRange($value,$range = array(),$fieldName) {		if(!in_array($value,$range)){				$range = implode(",",$range);				throw new Exception("client-check-error:Invalid Arguments:the value of " . $fieldName . " must be the item of  " . $range . " ." , 41);		}	}}///////////////////////////////////////////////////////////////////////////////////////////////////////////class DxRankGetRequest{	/** 	 * Ðè·µ»ØµÄ×Ö¶ÎÁÐ±í.¿ÉÑ¡Öµ:num_iid,seller_id,nick,title,price,volume,pic_url,item_url,shop_url;×Ö¶ÎÖ®¼äÓÃ","·Ö¸ô.	 **/	private $media;		private $pattern;	private $sort;	private $q;	private $wwid;	private $goodid;	private $startpage;	private $pagestep;	private $area;	private $price_min;	private $price_max;	private $tagid;	private $type;		private $apiParas = array();		public function setMedia($media)	{		$this->media = $media;		$this->apiParas["media"] = $media;	}	public function getMedia()	{		return $this->media;	}	public function setPattern($pattern)	{		$this->pattern = $pattern;		$this->apiParas["pattern"] = $pattern;	}	public function getPattern()	{		return $this->pattern;	}	public function setSort($sort)	{		$this->sort = $sort;		$this->apiParas["sort"] = $sort;	}	public function getSort()	{		return $this->sort;	}	public function setQ($q)	{		$this->q = $q;		$this->apiParas["q"] = $q;	}	public function getQ()	{		return $this->q;	}	public function setWwId($wwid)	{		$this->wwid = $wwid;		$this->apiParas["wwid"] = $wwid;	}	public function getWwId()	{		return $this->wwid;	}	public function setGoodId($goodid)	{		$this->goodid = $goodid;		$this->apiParas["goodid"] = $goodid;	}	public function getGoodId()	{		return $this->goodid;	}	public function setStartPage($startpage)	{		$this->startpage = $startpage;		$this->apiParas["startpage"] = $startpage;	}	public function getStartPage()	{		return $this->startpage;	}	public function setPageStep($pagestep)	{		$this->pagestep = $pagestep;		$this->apiParas["pagestep"] = $pagestep;	}	public function getPageStep()	{		return $this->pagestep;	}	public function setArea($area)	{		$this->area = $area;		$this->apiParas["area"] = $area;	}	public function getArea()	{		return $this->area;	}	public function setPrice($price_min,$price_max)	{				$this->price_min = $price_min;		$this->apiParas["price_min"] = $price_min;		$this->price_max = $price_max;		$this->apiParas["price_max"] = $price_max;	}	public function gePrice()	{		return array(			"min"=>$this->price_min,			"max"=>$this->price_max		);	}	public function setTagId($tagid)	{		$this->tagid = $tagid;		$this->apiParas["tagid"] = $tagid;	}	public function geTagId()	{		return $this->tagid;	}	public function setType($type)	{		$this->type = $type;		$this->apiParas["type"] = $type;	}	public function getType()	{		return $this->type;	}	public function getApiMethodName()	{		return "dx.rank.get";	}		public function getApiParas()	{		return $this->apiParas;	}		public function check()	{			DxRequestCheckUtil::checkRange($this->media,array(0,1),"media");		DxRequestCheckUtil::checkRange($this->pattern,array(0,1),"pattern");				if($this->media==0){			DxRequestCheckUtil::checkRange($this->sort,range(0,6),"sort");		}else{			DxRequestCheckUtil::checkRange($this->sort,array(0,2,5,6),"sort");		}		DxRequestCheckUtil::checkNotNull($this->q,"q");				if(DxRequestCheckUtil::checkEmpty($this->wwid)&&DxRequestCheckUtil::checkEmpty($this->goodid)){			DxRequestCheckUtil::checkNotNull($this->wwid,"wwid or goodid");					}		DxRequestCheckUtil::checkNotNull($this->startpage,"startpage");		DxRequestCheckUtil::checkNotNull($this->pagestep,"pagestep");		DxRequestCheckUtil::checkMinValue($this->startpage,1,"startpage");		DxRequestCheckUtil::checkMaxValue($this->startpage,100,"startpage");		DxRequestCheckUtil::checkMinValue($this->pagestep,1,"pagestep");		DxRequestCheckUtil::checkMaxValue($this->pagestep,5,"pagestep");		DxRequestCheckUtil::checkNumeric($this->price_min,"price_min");		DxRequestCheckUtil::checkNumeric($this->price_max,"price_max");				}		public function putOtherTextParam($key, $value) {		$this->apiParas[$key] = $value;		$this->$key = $value;	}}?>